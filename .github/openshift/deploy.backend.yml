apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "Nr-Old-Growth"
    tags: "nrog"
    iconClass: icon-js
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: nrog
  - name: COMPONENT
    description: Component name
    value: backend
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_LIMIT
    value: 200m
  - name: MEMORY_LIMIT
    value: 1Gi
  - name: CPU_REQUEST
    value: 80m
  - name: MEMORY_REQUEST
    value: 0.5Gi
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: bcgov/nr-old-growth:prod-backend
  - name: CHES_CLIENT_ID
    description: CHES service client id
    required: true
  - name: CHES_CLIENT_SECRET
    description: CHES service client secret
    required: true
  - name: CHES_TOKEN_URL
    description: CHES service authentication url
    required: true
  - name: CHES_API_URL
    description: CHES service api url
    required: true
  - name: NODE_ENV
    description: environment mode
    required: true
  - name: IDIR_FORM_PASSWORD
    description: CHEFS idir form password
    required: true
  - name: BCEID_FORM_PASSWORD
    description: CHEFS bceid form password
    required: true
  - name: INIT_IMAGE
    description: Imaged used by the init process
    value: hello-world
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: postgres-configmap
      namespace: migration
    data:
      V1__clean_table.sql: drop table if exists email_submission_log;
      V2__ddl.sql: |
        create table email_submission_log(
          email_submission_log_id     serial          not null,
          code                        varchar(10)     not null,
          exception_log               varchar(500)    null,
          confirmation_id             varchar(10)     null,
          form_id                     varchar(50)     null,
          form_version_id             varchar(50)     null,
          create_timestamp            timestamp       default current_timestamp not null,
          email_type                  varchar(10)     null,
          submission_update_timestamp timestamp       null
        );
      V3__alter.sql: |
        alter table email_submission_log add 
          constraint email_submission_log_id primary key (email_submission_log_id);
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    stringData:
      ches-client-id: "${CHES_CLIENT_ID}"
      ches-client-secret: "${CHES_CLIENT_SECRET}"
      idir-form-password: "${IDIR_FORM_PASSWORD}"
      bceid-form-password: "${BCEID_FORM_PASSWORD}"
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          initContainers:
            - name: ${NAME}-init
              image: ${INIT_IMAGE}
              imagePullPolicy: Always
              args: 
                - migrate
              env:                
                - name: FLYWAY_URL
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-conn
                - name: FLYWAY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-password
                - name: FLYWAY_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-user                
              volumeMounts:
                - mountPath: /flyway/sql
                  name: migration
          volumes:
            - name: migration
              configMap:
                name: postgres-configmap
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: POSTGRESQL_HOST
                  value: ${NAME}-${ZONE}-database
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-name
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-password
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-user
                - name: FRONTEND_URL
                  value: https://${NAME}-${ZONE}-frontend.${DOMAIN}
                - name: BACKEND_URL
                  value: https://${NAME}-${ZONE}-backend.${DOMAIN}
                - name: CHES_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: ches-client-id
                - name: CHES_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: ches-client-secret
                - name: CHES_TOKEN_URL
                  value: ${CHES_TOKEN_URL}
                - name: CHES_API_URL
                  value: ${CHES_API_URL}
                - name: CHES_EMAIL_FROM
                  value: "FSA_donotreply@gov.bc.ca"
                - name: NODE_ENV
                  value: ${NODE_ENV}
                # test form
                # - name: IDIR_FORM_ID
                #   value: "b6803f31-269b-4406-8cc7-b2bdc80d94dc"
                # - name: IDIR_FORM_VERSION_ID
                #   value: "21bae274-5f36-4fd7-a14e-89787c468824"
                # - name: IDIR_FORM_PASSWORD
                #   value: ""
                - name: IDIR_FORM_ID
                  value: "b15b1975-3caa-4984-a183-471c5610c8a5"
                - name: IDIR_FORM_VERSION_ID
                  value: "7f0edea9-7fb3-46ea-8add-0ffd79294d59"
                - name: IDIR_FORM_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: idir-form-password
                - name: BCEID_FORM_ID
                  value: "e4591d9b-9005-4bd6-8145-2c92ce890d91"
                - name: BCEID_FORM_VERSION_ID
                  value: "2f781ffd-8de9-4706-9c30-3daa20e7655f"
                - name: BCEID_FORM_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: bceid-form-password

              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 15
                timeoutSeconds: 5
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 30
                timeoutSeconds: 5
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 80
          targetPort: 3000
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect

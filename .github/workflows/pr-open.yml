name: Pull Request

on:
  pull_request:
    branches:
      - main
      - dev

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TRIGGERS: ('frontend/' 'backend/' '.github/pipeline' '.github/workflows')

jobs:
  check:
    name: Check
    outputs:
      build: ${{ steps.check.outputs.build }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check and process modified files
        id: check
        run: |
          # Fetch main to diff against
          git fetch origin main:refs/remotes/origin/master

          # Trigger build if diff matches any triggers
          TRIGGERS=${{ env.TRIGGERS }}
          while read -r check
          do
              for t in "${TRIGGERS[@]}"; do
                  if [[ "${check}" =~ "${t}" ]]
                  then
                      # Output build=true for next steps
                      echo "::set-output name=build::true"
                      echo -e "${t}\n --> ${check}\n"
                      exit 0
                  fi
              done
          done < <(git diff origin/main --name-only)
          echo "Build and deploy workflows not triggered"

  build-backend:
    name: Build-Backend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend/
          push: true
          tags: ghcr.io/bcgov/greenfield-template:${{ github.event.number }}-backend
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    name: Build-Frontend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend/
          build-args: BACKEND_URL=https://gfp-${ZONE}-backend.apps.silver.devops.gov.bc.ca/
          push: true
          tags: ghcr.io/bcgov/greenfield-template:${{ github.event.number }}-frontend
          cache-from: type=gha
          cache-to: type=gha,mode=max

  tests-backend:
    name: Tests-Backend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Tests
        run: |
          cd backend
          npm ci
          npm test

  codeql:
    name: CodeQL
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize
        uses: github/codeql-action/init@v1
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      - name: Analysis
        uses: github/codeql-action/analyze@v1

  # # https://github.com/snyk/snyk
  # snyk:
  #   name: Snyk
  #   needs:
  #     - check
  #   if: needs.check.outputs.build == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Run Snyk to check for vulnerabilities
  #     uses: snyk/actions/node@master
  #     env:
  #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     with:
  #       args: --all-projects --severity-threshold=high

  # # https://github.com/marketplace/actions/aqua-security-trivy
  # trivy-repo:
  #   name: Trivy-Repo
  #   needs:
  #     - check
  #   if: needs.check.outputs.build == 'true'
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Run Trivy vulnerability scanner in repo mode
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: 'fs'
  #         ignore-unfixed: true
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #         severity: 'CRITICAL'

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v1
  #       with:
  #         sarif_file: 'trivy-results.sarif'

  # trivy-backend:
  #   name: Trivy-Backend
  #   needs:
  #     - build-backend
  #     - build-frontend
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Trivy Vulnerability Scan
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: ghcr.io/bcgov/greenfield-template:${{ github.event.number }}-backend
  #       exit-code: '1'
  #       ignore-unfixed: true
  #       severity: CRITICAL
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'

  #   - name: Upload Trivy results to GitHub Security tab
  #     uses: github/codeql-action/upload-sarif@v1
  #     with:
  #       sarif_file: 'trivy-results.sarif'

  # trivy-frontend:
  #   name: Trivy-Frontend
  #   needs:
  #     - build-backend
  #     - build-frontend
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Trivy Vulnerability Scan
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: ghcr.io/bcgov/greenfield-template:${{ github.event.number }}-frontend
  #       exit-code: '1'
  #       ignore-unfixed: true
  #       severity: CRITICAL
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'

  #   - name: Upload Trivy results to GitHub Security tab
  #     uses: github/codeql-action/upload-sarif@v1
  #     with:
  #       sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy
    needs:
      - build-backend
      - build-frontend
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          set -eux
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Cancel any rollouts in progress
          oc rollout cancel dc/gfp-${{ github.event.number }}-backend 2> /dev/null \
            || true && echo "No rollout in progress"
          oc rollout cancel dc/gfp-${{ github.event.number }}-frontend 2> /dev/null \
            || true && echo "No rollout in progress"
          # Remove any stale imagestreams
          oc delete is/gfp-${{ github.event.number }}-backend 2> /dev/null \
            || true && echo "No stale imagestreams"
          oc delete is/gfp-${{ github.event.number }}-frontend 2> /dev/null \
            || true && echo "No stale imagestreams"

          # Process and apply deployment templates
          for yml in .github/pipeline/deploy.*.yml
          do
            oc process -f ${yml} -p ZONE=${{ github.event.number }} -p NAMESPACE=${{ secrets.NAMESPACE }} \
              | oc apply -f -
          done

          # Start rollout (if necessary) and follow it
          oc rollout latest dc/gfp-${{ github.event.number }}-backend 2> /dev/null \
            || true && echo "Rollout in progress"
          oc logs -f dc/gfp-${{ github.event.number }}-backend
          oc rollout latest dc/gfp-${{ github.event.number }}-frontend 2> /dev/null \
            || true && echo "Rollout in progress"
          oc logs -f dc/gfp-${{ github.event.number }}-frontend

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/gfp-${{ github.event.number }}-database -w
          oc rollout status dc/gfp-${{ github.event.number }}-backend -w
          oc rollout status dc/gfp-${{ github.event.number }}-frontend -w

      - name: Deployment update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: |
            [${{ secrets.ENV }} - Backend](https://gfp-${{ github.event.number }}-backend.apps.silver.devops.gov.bc.ca/) deployment available
            [${{ secrets.ENV }} - Frontend](https://gfp-${{ github.event.number }}-frontend.apps.silver.devops.gov.bc.ca/) deployment available
          allow-repeats: false

  zap:
    name: Zap
    needs:
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://gfp-${{ github.event.number }}-frontend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false
